const jwt = require("jsonwebtoken");
const config = require("config");
// const br = require('./DataModel/baseResponse');
const br = require("../Helper/DataModel/baseResponse")

module.exports = function(req,res, next){
    // Get token from header
    const token = req.header("x-auth-token")
    console.log(token);

    // check if not token
    if(!token){
        return res.status(401).json({ msg: "no token authorization denied" });
    }

    // verify token
    try{
        const decoded = jwt.verify(token, config.get("jwtSecret"));

        req.user = decoded.user;
        next();
    }catch(err){
        res.status(401).json({ msg: "Token is not valid" });
        console.log(err);
    }
}

// module.exports = (req, res, next) => {
//     var token;
//     if (req.headers && req.headers.authorization) {
//         var parts = req.headers.authorization.split(' ');

//         if (parts.length === 2) {
//             var scheme = parts[0],
//                 credentials = parts[1];

//             if (/^Bearer$/i.test(scheme)) {
//                 token = credentials;
//             }
//         } else {
//             return br.sendError(res, {}, 'Format is Authorization: Bearer [token]!', 401);
//         }
//     } else if (req.header('token')) {
//         token = req.header('token');
//         console.log(token)

//         // We delete the token from query and body to not mess with blueprints
//         // delete req.query.token;
//         // delete req.body.token;
//     } else {
//         return br.sendError(res, {}, 'No Authorization header was found', 403);
//     }
// }
